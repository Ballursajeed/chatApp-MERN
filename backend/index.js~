import express from "express";
import dotenv from "dotenv";
  dotenv.config();
import mongoose from "mongoose";
import { User } from "./models/user.model.js"
import { Message } from "./models/message.model.js"
import bcrypt from "bcrypt";
import cors from 'cors';
import jwt from 'jsonwebtoken';
import cookieParser from 'cookie-parser';
import { WebSocketServer } from 'ws';
import * as fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const app = express();
const PORT = process.env.PORT || 8000;

 // Get the current module's filename
const __filename = fileURLToPath(import.meta.url);
// Get the current module's directory
const __dirname = dirname(__filename);

app.use(
  cors({
  	credentials:true,
    origin: 'http://localhost:3000',
    methods:['GET','POST','PUT','DELETE']
  })
);
 app.use('/uploads',express.static(__dirname + '/uploads'))
 app.use(express.json());
app.use(cookieParser());

const connectDB = async() => {
try {
 const MongoDB = await mongoose.connect(process.env.MONGO_URL)
 console.log("mongoDB connected!! on host:",MongoDB.connection.host);
 }
 catch (err) {
   console.log("Error while mongoDB connection!!");
   throw new Error("MongoDB connection error:", err)
 }
}

 //mongoDB connection
 connectDB();




 app.post('/register',async(req,res) => {

   const { userName,Email,Password } = req.body;

   if (!userName || !Email || !Password) {
          res.status(200).json({
               message:"All fields are required!"
          })
   }

   const existingUser = await User.findOne({ Email });
   if (existingUser) {
            res.status(200).json({
                  message:"User is already exist"
            })
            throw new Error("User is already exist!")
   }

     const hashedPassword = await bcrypt.hash(Password,10);

  //storing in DataBase
  const user = await User.create({
        userName,
        Email,
        Password: hashedPassword,
  });

  jwt.sign({ userId: user._id, userData: user  }, process.env.JWT_SECRET, { expiresIn: '10h' },(err,token) => {
             if (err) throw err;
             res.cookie('token',token,{sameSite:'none',secure:true}).status(201).json({
                  message:"user is registered!",
                  user,
                  _id:user._id,
                  token
             });
  });
 });

 app.post('/login',async(req,res) => {
   const { userName, Password } = req.body;

  if (!userName || !Password) {
        res.status(200).json({
           message:'All fields are required!'
        })
  }

  const user = await User.findOne({userName})
  if (!user) {
        res.status(400).json({
              message:"User not found!"
        })
  }

  const isMatch = await bcrypt.compare(Password,user.Password);

  if (!isMatch) {
        res.status(401).json({
              message:"User name or password is Incorrect!"
        })
  }

 jwt.sign({ userId: user._id, userData: user  }, process.env.JWT_SECRET, { expiresIn: '10h' },(err,token) => {
             if (err) throw err;
             res.cookie('token',token,{sameSite:'none',secure:true}).status(200).json({
                  message:"user loggedIn successfully!",
                  user,
                  _id:user._id,
                  token
             });
  });

  })

  app.post('/logout',(req,res) => {
        res.cookie('token','',{sameSite:'none',secure:true}).json('ok');
  })

async function getUserDataFromRequest(req) {
	return new Promise((resolve,reject) => {
      const token = req.cookies?.token;

   if (token) {
        jwt.verify(token,process.env.JWT_SECRET, {}, (err, userData) => {
                 if (err) throw err;
                 resolve(userData);
      });
   } else {
          reject('no token!')
   }
	});
 }

 app.get('/profile',(req,res) => {
      const token = req.cookies?.token;

   if (token) {
        jwt.verify(token,process.env.JWT_SECRET, {}, (err, userData) => {
                   if (err) throw err;

                 res.json(userData);
      });
   } else {
             res.status(200).json('no token!!');
   }
 });

 app.get('/messages/:userId',async(req,res) => {
        const {userId} = req.params;
        const userData = await getUserDataFromRequest(req);
        const ourUserId = userData.userId;
        const messages = await Message.find({
             sender: {$in:[userId,ourUserId]},
             recipient: {$in:[userId,ourUserId]}
        }).sort({createdAt:1});

    res.json(messages);

 });

 app.get('/people',async(req,res) => {
   const users = await User.find({},{'_id':1,userName:1});
   res.json(users);
 });


const server = app.listen(PORT , () => console.log("Server is running on PORT:",PORT));

const wss = new WebSocketServer({server});

wss.on('connection',(connection,req) => {

 function notifyAboutOnlinePeople() {
     [...wss.clients].forEach(client => {
           client.send(JSON.stringify({
           online: [...wss.clients].map(c => ({userId:c.userId,username:c.username}))}));
           });
 }

  connection.isAlive = true;

  connection.timer = setInterval(() => {
     connection.ping();
     connection.deathTimer = setTimeout(() => {
       connection.isAlive = false;
       clearInterval(connection.timer)
       connection.terminate();
       notifyAboutOnlinePeople();
     },1000);
  }, 5000);

  connection.on('pong',() => {
       clearTimeout(connection.deathTimer);
  })

  //read username and id from the cookie for this connection
  const cookies = req.headers.cookie;
  if (cookies) {
     const tokenCookieString = cookies.split(';').find(str => str.startsWith('token='));
     if (tokenCookieString) {
       const token = tokenCookieString.split('=')[1];
       if (token) {
            jwt.verify(token,process.env.JWT_SECRET, {},(err,user) => {
                if (err) throw err;
                const { userId, userData } = user;
                connection.userId = userId;
                connection.username = userData?.userName;
            });
       }
     }
  }

 connection.on('message',async(message) => {
   const messageData = JSON.parse(message.toString());
    const {recipient,text, file} = messageData;
    if (file) {
    	    const parts = file.name.split('.');
    	    const ext = parts[parts.length-1];
    	    const filename = Date.now() + '.'+ext;
    	    const path = new URL('uploads/' + filename, import.meta.url).pathname;
    	    const bufferData = new Buffer(file.data, 'base64');
          fs.writeFile(path, bufferData,() => {
               console.log('file saved on path:'+path);
          })
    }
    if (recipient && text) {
    const messageDocument = await Message.create({
            sender:connection.userId,
            recipient,
            text,
    	 });
             [...wss.clients]
                 .filter(c => c.userId === recipient)
                 .forEach(c => c.send(JSON.stringify({
                 	     text,
                 	     sender:connection?.userId,
                 	     recipient,
                 	     _id:messageDocument._id
                  })));
    }

 });
//notify everyone about online people(when someone connects))
 notifyAboutOnlinePeople();

});




