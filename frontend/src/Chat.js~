import React,{useContext, useRef,useEffect} from "react";
import Logo from './Logo.js';
import Contact from './Contact.js';
import { UserContext } from "./UserContext.js";
import { uniqBy } from 'lodash';
import axios from 'axios';

const Chat = () => {

 const [ws,setWs] = React.useState(null);
 const [onlinePeople,setOnlinePeople] = React.useState({});
 const [selectedUserId,setSelectedUserId] = React.useState(null);
 const [newMessageText, setNewMessageText] = React.useState('');
 const [messages, setMessages] = React.useState([]);
 const [offLinePeople, setOfflinePeople] = React.useState({});
 const [searchPeople, setSearchPeople] = React.useState('');
 const [searchedPeople, setSearchedPeople] = React.useState([]);

 const divUnderMessages = useRef();

 const {username,id,setId,setLoggedusername} = useContext(UserContext);

 React.useEffect(() => {
    connectToWs();
 },[]);

const connectToWs = () => { //connecting web socket server
    const ws = new WebSocket('ws://localhost:8000');
    setWs(ws);
    ws.addEventListener('message',handleMessage);
    ws.addEventListener('close',() => {
       setTimeout(() => {
                 console.log('Disconnected!, trying to reconnect to the server.....');
                 connectToWs();
       },1000)

    })
}

 const showOnlinePeople = (peopleArray) => {
       const people = {};
       peopleArray.forEach(({userId,username}) => {
                 people[userId] = username;
       });
       setOnlinePeople(people);
 }

 function handleMessage(e) {             //receiving a message
       const messageData = JSON.parse(e.data);

       if ('online' in messageData) {
            showOnlinePeople(messageData.online)
       } else if ('text' in messageData) {
       	  if (messageData.sender === selectedUserId) {
            	   setMessages(prev => ([...prev,{...messageData}]));
       	  }

       }
 }

 const handleLogout = () => {
    axios.post('http://localhost:8000/logout').then(() => {
    	   setWs(null);
         setId(null);
         setLoggedusername(null);
    })
 }

 const sendMessage = (ev) => { //sending a message
        if (ev) ev.preventDefault();
         ws.send(JSON.stringify({
                    recipient: selectedUserId,
                    text: newMessageText,
         }));
         setNewMessageText('');
         setMessages(prev => ([...prev,{
         	text:newMessageText,
            sender:id,
            recipient:selectedUserId,
            _id: Date.now(),
         	 }]));

 }

 useEffect(() => {
   const div = divUnderMessages.current;

   if (div) {
   div.scrollIntoView({behavior:'smooth',block:'end'});
   }

 },[messages]);


 useEffect(() => {                  //getting offline people
  axios.get('http://localhost:8000/people').then(res => {
       const offlinePeopleArr = res.data
        .filter(p => p._id !== id)
        .filter(p => !Object.keys(onlinePeople).includes(p._id));

    const offlinePeople = {};
    offlinePeopleArr.forEach(p => {
          offlinePeople[p._id] = p;
    });
       setOfflinePeople(offlinePeople);

  })
 },[onlinePeople])

 useEffect(() => {
   if (selectedUserId) {
         axios.get('http://localhost:8000/messages/'+selectedUserId).then(response => {
             setMessages(response.data);
         })

   }
 },[selectedUserId])

 const searchKey = async() => {
         const response = await axios.post('http://localhost:8000/searchPeople',{
         searchKey: searchPeople
    });
    const searchedUserArr = response.data.users;
    setSearchedPeople(searchedUserArr);
 }

const checkSearchedUserInOnlinePeople = (userId) => {
    return onlinePeopleExclOurUse.hasOwnProperty(userId);
}

useEffect(() => {
    searchKey();
},[searchPeople])

 const onlinePeopleExclOurUse = {...onlinePeople};
 delete onlinePeopleExclOurUse[id];


 const messagesWithoutDuplecates = uniqBy(messages, '_id');

 return(
   <>
    <div className='flex h-screen'>
     <div className='bg-white w-1/3 flex flex-col overflow-y-scroll'>
      <div className='flex-grow'>
         <Logo />
         {Object.keys(onlinePeopleExclOurUse).map(userId => (
            <Contact
             userId={userId}
             key={userId}
             online={true}
             username={onlinePeopleExclOurUse[userId]}
             onClick={() => setSelectedUserId(userId)}
             selected={userId === selectedUserId}
            />
         ))}
         <div className='flex items-center w-full h-15 text-center'>
            <input placeholder='Search People....'
             value={searchPeople}
             onChange={ev => setSearchPeople(ev.target.value)}
              className='bg-white flex-grow border rounded-sm p-2' />
         </div>
         {
         	 searchedPeople.map(user => (
            <Contact
             key={user._id}
             userId={user._id}
             online={checkSearchedUserInOnlinePeople(user._id)}
             username={user.userName}
             onClick={() => setSelectedUserId(user._id)}
             selected={user._id === selectedUserId}
            />
            ))
        }

       </div>
        <div className='p-2 text-center flex items-center justify-center'>
         <span
          className='mr-2 text-sm text-gray-600 flex itmes-center'>
             <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4">
               <path fillRule="evenodd" d="M7.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3.751 20.105a8.25 8.25 0 0 1 16.498 0 .75.75 0 0 1-.437.695A18.683 18.683 0 0 1 12 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 0 1-.437-.695Z" clipRule="evenodd" />
             </svg>
           {username}</span>
         <button className='text-sm bg-blue-100 py-1 px-2 border rounded-sm  text-gray-700'
          onClick={handleLogout}
         >
           Logout
         </button>
        </div>
       </div>
      <div className='flex flex-col bg-blue-50 w-2/3 p-2'>
        <div className='flex-grow'>
         {!selectedUserId && (
                   <div className='flex flex-grow h-full items-center justify-center '>
                      <div className='text-gray-500 '>&larr; Selecte a Person from the sidebar</div>
                   </div>
         )}

         {!!selectedUserId && (
         <div className='mb-4 h-full'>
            <div className='relative h-full '>
              <div className='overflow-y-scroll absolute top-0 left-0 right-0 bottom-2'>
               {messagesWithoutDuplecates.map(message => (
               <div key={message._id} className={(message.sender === id ? 'text-right': 'text-left')}>
                  <div className={'text-left inline-block p-2 my-2 rounded-md text-sm '
                       +(message.sender === id ? 'bg-blue-500 text-white':'bg-white text-gray-600')}>
                        {message.text}
                   </div>
               </div>
               ))}
             <div ref={divUnderMessages}></div>
            </div>
          </div>
         </div>
         )}

        </div>
        {!!selectedUserId && (
        <form className='flex gap-2' onSubmit={sendMessage}>
          <input
           type='text'
           value={newMessageText}
           onChange={ev => setNewMessageText(ev.target.value)}
           placeholder='type your message'
           className='bg-white flex-grow border rounded-sm p-2'/>

          <button type="submit" className='bg-blue-500 p-2 rounded-sm text-white'>
             <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
             </svg>
           </button>
        </form>
        )}
      </div>
    </div>
   </>
 )
}

export default Chat;